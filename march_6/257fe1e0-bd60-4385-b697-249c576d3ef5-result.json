{"name": "test_07_remove_saved_card_at_checkout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <i class=\"fa fa-trash\"></i> is not clickable at point (400, 591). Other element would receive the click: <div class=\"card-header d-flex justify-content-between\" style=\"background: #e7f0fe\">...</div>\n  (Session info: chrome=110.0.5481.178)", "trace": "self = <test_profile_elements.TestBestInTownPizzaProfile testMethod=test_07_remove_saved_card_at_checkout>\n\n    @allure.description(\"To verify and remove a card at checkout stage.\")\n    def test_07_remove_saved_card_at_checkout(self):\n        By_xpath = self.driver.find_element_by_xpath\n        try:\n            f = open(\"data.json\", \"r\")\n            data = json.loads(f.read())\n            time.sleep(2)\n            new_address = random.choice(data[\"addresslist\"])\n            hno = ''.join([\"{}\".format(randint(0, 9)) for num in range(0, 2)])\n            sign_in(self.driver, data[\"username3\"], data[\"password\"])\n            for m in data[\"sandwiches\"]:\n                print(m)\n                execute_click_by_product(self.driver, m)\n                select_product(self.driver, m[\"menuitem\"])\n                time.sleep(2)\n                select_pizza_sides(self.driver, \"large\",\n                                   \"thin\", m[\"Fries\"], m[\"Additional_topping\"])\n                add_to_bag_and_verify_cart_details(self.driver)\n            Checkout_to_paymentscreen(self.driver)\n            remove_saved_card(self.driver)\n            place_ur_order_from_payment(self.driver, \"Delivery\")\n            time.sleep(2)\n            print(\"Test case 07 ran successfully\")\n            f.close()\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(\n            ), name='exception_screen', attachment_type=AttachmentType.PNG)\n>           raise e\n\ntest_profile_elements.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_profile_elements.py:216: in test_07_remove_saved_card_at_checkout\n    remove_saved_card(self.driver)\nmethods.py:944: in remove_saved_card\n    raise e\nmethods.py:934: in remove_saved_card\n    By_xpath(checkoutlocators.remove_card_btn).click()\n..\\..\\..\\AppData\\Roaming\\Python\\Python37\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Roaming\\Python\\Python37\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Roaming\\Python\\Python37\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DAFFB2FB88>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CE7BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CE7B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <i class=\"fa fa-trash\"></i> is not clickable at point (400, 591). Other element would receive the click: <div class=\"card-header d-flex justify-content-between\" style=\"background: #e7f0fe\">...</div>\nE         (Session info: chrome=110.0.5481.178)\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python37\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementClickInterceptedException"}, "description": "To verify and remove a card at checkout stage.", "steps": [{"name": "To fetch the website with url: 'https://stage.bestintownpizza.com/home'", "status": "passed", "attachments": [{"name": "website_screen", "source": "7533f408-d438-473e-82b4-516b5c8094e9-attachment.png", "type": "image/png"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6d910e3d168b9d5130bc1a7f4fddbab\")>"}, {"name": "site_url", "value": "'https://stage.bestintownpizza.com/home'"}], "start": 1678295459500, "stop": 1678295470426}, {"name": "To verify that user is able to sign in with any email id.", "status": "passed", "attachments": [{"name": "Signin_screen", "source": "618d143d-7cc4-43ea-a7f9-7098adfa190c-attachment.png", "type": "image/png"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6d910e3d168b9d5130bc1a7f4fddbab\")>"}, {"name": "email", "value": "'ritutanwar1510@gmail.com'"}, {"name": "password", "value": "'Ritu@1510'"}], "start": 1678295472437, "stop": 1678295481212}, {"name": "To perform click operation on the element specified in list:'SANDWICHES HALAL MEDITERRANEAN SPECALTIES'", "status": "passed", "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6d910e3d168b9d5130bc1a7f4fddbab\")>"}, {"name": "productname", "value": "'SANDWICHES HALAL MEDITERRANEAN SPECALTIES'"}], "start": 1678295481213, "stop": 1678295481305}, {"name": "To be able to select desired product", "status": "passed", "attachments": [{"name": "toppings_screen", "source": "8c103f2c-a538-4d81-9d34-0d6061eb0ca0-attachment.png", "type": "image/png"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6d910e3d168b9d5130bc1a7f4fddbab\")>"}, {"name": "productname", "value": "'Falafel Sandwich'"}], "start": 1678295484310, "stop": 1678295484881}, {"name": "To be able to select pizza sides and quantity", "status": "passed", "attachments": [{"name": "toppings_screen", "source": "402a9664-5900-4d1a-9d9a-29d8c8d714b2-attachment.png", "type": "image/png"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6d910e3d168b9d5130bc1a7f4fddbab\")>"}, {"name": "size", "value": "'large'"}, {"name": "crust", "value": "'thin'"}, {"name": "onions", "value": "'Add Fries'"}, {"name": "additional_Topping", "value": "'nothing'"}], "start": 1678295486893, "stop": 1678295508317}, {"name": "to add product to bag and verify cart details before checkout", "status": "passed", "attachments": [{"name": "cart_screen", "source": "32abda12-1435-4e4b-9792-7b11e1e5f9a3-attachment.png", "type": "image/png"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6d910e3d168b9d5130bc1a7f4fddbab\")>"}], "start": 1678295508317, "stop": 1678295537291}, {"name": "Checkout to payment screen", "status": "passed", "attachments": [{"name": "screen", "source": "b2860c45-7514-455b-8c47-e9157e0f1199-attachment.png", "type": "image/png"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6d910e3d168b9d5130bc1a7f4fddbab\")>"}], "start": 1678295537291, "stop": 1678295544907}, {"name": "To remove a saved card at checkout stage.", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <i class=\"fa fa-trash\"></i> is not clickable at point (400, 591). Other element would receive the click: <div class=\"card-header d-flex justify-content-between\" style=\"background: #e7f0fe\">...</div>\n  (Session info: chrome=110.0.5481.178)\n\n", "trace": "  File \"c:\\python37\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Digital Suppliers\\Documents\\GitHub\\bestintown\\methods.py\", line 944, in remove_saved_card\n    raise e\n  File \"C:\\Users\\Digital Suppliers\\Documents\\GitHub\\bestintown\\methods.py\", line 934, in remove_saved_card\n    By_xpath(checkoutlocators.remove_card_btn).click()\n  File \"C:\\Users\\Digital Suppliers\\AppData\\Roaming\\Python\\Python37\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 80, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\Digital Suppliers\\AppData\\Roaming\\Python\\Python37\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\Users\\Digital Suppliers\\AppData\\Roaming\\Python\\Python37\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Digital Suppliers\\AppData\\Roaming\\Python\\Python37\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6d910e3d168b9d5130bc1a7f4fddbab\")>"}], "start": 1678295544907, "stop": 1678295548042}], "attachments": [{"name": "exception_screen", "source": "150a5c65-19be-450d-8103-24ff61ffe4e5-attachment.png", "type": "image/png"}], "start": 1678295457840, "stop": 1678295550732, "uuid": "96bc9462-b518-40e9-aba6-2f339c35ad99", "historyId": "354708edb0539f771a0d1eb8552bc7b6", "testCaseId": "82353044f028e6a2f6a3e9779fbdacc3", "fullName": "test_suite.TestBestInTownPizzaProfile#test_07_remove_saved_card_at_checkout", "labels": [{"name": "suite", "value": "test_suite"}, {"name": "subSuite", "value": "TestBestInTownPizzaProfile"}, {"name": "host", "value": "DESKTOP-JHQBC5Q"}, {"name": "thread", "value": "15572-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_suite"}]}