{"name": "test_22_SIDE_ORDERS", "status": "broken", "statusDetails": {"message": "ValueError: could not convert string to float:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"38f3660f0e34e8ddedc36b2e7610d2d4\")>\n\n    @ allure.step(\"to add product to bag and verify cart details before checkout\")\n    def add_to_bag_and_verify_cart_details(driver):\n        By_xpath = driver.find_element_by_xpath\n        By_id = driver.find_element_by_id\n        try:\n            try:\n                By_xpath(productlocators.add_to_bag_btn_price).click()\n            except:\n                By_xpath(productlocators.add_to_bag_btn2).click()\n            time.sleep(2)\n    \n            By_xpath(cartLocators.cart_bag).click()\n            time.sleep(5)\n    \n            item_price = By_xpath(cartLocators.product_price).text\n            print(\"product price:  \" + item_price)\n            item_price2 = item_price[1:]\n            print(item_price2)\n    \n            subtotal = By_xpath(cartLocators.cart_subtotal).text\n            subtotal2 = subtotal[1:]\n            print(subtotal2)\n    \n            dis = By_xpath(cartLocators.discount).text\n            dis_amount = dis[1:]\n            print(dis_amount)\n            try:\n                fee = By_xpath(cartLocators.delivery_fee).text\n                delivery_fee = fee[1:]\n                print(delivery_fee)\n            except:\n                print(\"its a pickup order\")\n    \n            try:\n>               tax = By_xpath(cartLocators.estimated_tax).text\n\nmethods.py:591: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"38f3660f0e34e8ddedc36b2e7610d2d4\")>, xpath = '/html/body/main/section/div[2]/div[1]/div[4]/div[2]'\n\n    def find_element_by_xpath(self, xpath):\n        \"\"\"\n        Finds an element by xpath.\n    \n        :Args:\n         - xpath - The xpath locator of the element to find.\n    \n        :Returns:\n         - WebElement - the element if it was found\n    \n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n    \n        :Usage:\n            element = driver.find_element_by_xpath('//div/td[1]')\n        \"\"\"\n>       return self.find_element(by=By.XPATH, value=xpath)\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python37\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:394: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"38f3660f0e34e8ddedc36b2e7610d2d4\")>, by = 'xpath'\nvalue = '/html/body/main/section/div[2]/div[1]/div[4]/div[2]'\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n        Find an element given a By strategy and locator. Prefer the find_element_by_* methods when\n        possible.\n    \n        :Usage:\n            element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n        return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n>           'value': value})['value']\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python37\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:978: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"38f3660f0e34e8ddedc36b2e7610d2d4\")>, driver_command = 'findElement'\nparams = {'using': 'xpath', 'value': '/html/body/main/section/div[2]/div[1]/div[4]/div[2]'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python37\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000012EC70AFAC8>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CE7BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CE7B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"/html/body/main/section/div[2]/div[1]/div[4]/div[2]\"}\nE         (Session info: chrome=110.0.5481.178)\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python37\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"38f3660f0e34e8ddedc36b2e7610d2d4\")>\n\n    @ allure.step(\"to add product to bag and verify cart details before checkout\")\n    def add_to_bag_and_verify_cart_details(driver):\n        By_xpath = driver.find_element_by_xpath\n        By_id = driver.find_element_by_id\n        try:\n            try:\n                By_xpath(productlocators.add_to_bag_btn_price).click()\n            except:\n                By_xpath(productlocators.add_to_bag_btn2).click()\n            time.sleep(2)\n    \n            By_xpath(cartLocators.cart_bag).click()\n            time.sleep(5)\n    \n            item_price = By_xpath(cartLocators.product_price).text\n            print(\"product price:  \" + item_price)\n            item_price2 = item_price[1:]\n            print(item_price2)\n    \n            subtotal = By_xpath(cartLocators.cart_subtotal).text\n            subtotal2 = subtotal[1:]\n            print(subtotal2)\n    \n            dis = By_xpath(cartLocators.discount).text\n            dis_amount = dis[1:]\n            print(dis_amount)\n            try:\n                fee = By_xpath(cartLocators.delivery_fee).text\n                delivery_fee = fee[1:]\n                print(delivery_fee)\n            except:\n                print(\"its a pickup order\")\n    \n            try:\n                tax = By_xpath(cartLocators.estimated_tax).text\n                tax2 = tax[1:]\n                print(tax2)\n                totalprice = float(subtotal2) + float(delivery_fee) + \\\n                    float(dis_amount) + float(tax2)\n                print(totalprice)\n            except:\n                print(\"no discount\")\n                try:\n                    totalprice = float(subtotal2) + \\\n>                       float(delivery_fee) + float(dis_amount)\nE                       ValueError: could not convert string to float:\n\nmethods.py:601: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_menuitems.TestMenuItems testMethod=test_22_SIDE_ORDERS>\n\n    @allure.description(\"To verify SIDE ORDERS added successfully to cart.\")\n    def test_22_SIDE_ORDERS(self):\n        By_xpath = self.driver.find_element_by_xpath\n        try:\n            f = open(\"data.json\", \"r\")\n            data = json.loads(f.read())\n            time.sleep(5)\n            sign_in(self.driver, data[\"username3\"], data[\"password\"])\n            time.sleep(2)\n            for m in data[\"SIDE ORDERS\"]:\n                print(m)\n                execute_click_by_product(self.driver, m)\n                select_product(self.driver, m[\"menuitem\"])\n                time.sleep(2)\n                add_to_bag_and_verify_cart_details(self.driver)\n            Checkout_to_paymentscreen(self.driver)\n            time.sleep(3)\n            place_ur_order_from_payment(self.driver, \"Delivery\")\n            order_number = verify_order_details(\n                self.driver, \"Delivery\", \"9:30am\")\n            print(order_number)\n            f.close()\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(\n            ), name='exception_screen', attachment_type=AttachmentType.PNG)\n>           raise e\n\ntest_menuitems.py:646: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_menuitems.py:635: in test_22_SIDE_ORDERS\n    add_to_bag_and_verify_cart_details(self.driver)\nmethods.py:629: in add_to_bag_and_verify_cart_details\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"38f3660f0e34e8ddedc36b2e7610d2d4\")>\n\n    @ allure.step(\"to add product to bag and verify cart details before checkout\")\n    def add_to_bag_and_verify_cart_details(driver):\n        By_xpath = driver.find_element_by_xpath\n        By_id = driver.find_element_by_id\n        try:\n            try:\n                By_xpath(productlocators.add_to_bag_btn_price).click()\n            except:\n                By_xpath(productlocators.add_to_bag_btn2).click()\n            time.sleep(2)\n    \n            By_xpath(cartLocators.cart_bag).click()\n            time.sleep(5)\n    \n            item_price = By_xpath(cartLocators.product_price).text\n            print(\"product price:  \" + item_price)\n            item_price2 = item_price[1:]\n            print(item_price2)\n    \n            subtotal = By_xpath(cartLocators.cart_subtotal).text\n            subtotal2 = subtotal[1:]\n            print(subtotal2)\n    \n            dis = By_xpath(cartLocators.discount).text\n            dis_amount = dis[1:]\n            print(dis_amount)\n            try:\n                fee = By_xpath(cartLocators.delivery_fee).text\n                delivery_fee = fee[1:]\n                print(delivery_fee)\n            except:\n                print(\"its a pickup order\")\n    \n            try:\n                tax = By_xpath(cartLocators.estimated_tax).text\n                tax2 = tax[1:]\n                print(tax2)\n                totalprice = float(subtotal2) + float(delivery_fee) + \\\n                    float(dis_amount) + float(tax2)\n                print(totalprice)\n            except:\n                print(\"no discount\")\n                try:\n                    totalprice = float(subtotal2) + \\\n                        float(delivery_fee) + float(dis_amount)\n                except:\n>                   totalprice = float(subtotal2) + float(dis_amount)\nE                   ValueError: could not convert string to float:\n\nmethods.py:603: ValueError"}, "description": "To verify SIDE ORDERS added successfully to cart.", "steps": [{"name": "To fetch the website with url: 'https://stage.bestintownpizza.com/home'", "status": "passed", "attachments": [{"name": "website_screen", "source": "9319b1a8-9f40-47e3-aaf8-fe65fd1dc5ec-attachment.png", "type": "image/png"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"38f3660f0e34e8ddedc36b2e7610d2d4\")>"}, {"name": "site_url", "value": "'https://stage.bestintownpizza.com/home'"}], "start": 1678098530337, "stop": 1678098536140}, {"name": "To verify that user is able to sign in with any email id.", "status": "passed", "attachments": [{"name": "Signin_screen", "source": "c5e64706-ddb9-4642-8bff-21e18327d99a-attachment.png", "type": "image/png"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"38f3660f0e34e8ddedc36b2e7610d2d4\")>"}, {"name": "email", "value": "'ritutanwar1510@gmail.com'"}, {"name": "password", "value": "'Ritu@1510'"}], "start": 1678098541142, "stop": 1678098549479}, {"name": "To perform click operation on the element specified in list:'SIDE ORDERS'", "status": "passed", "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"38f3660f0e34e8ddedc36b2e7610d2d4\")>"}, {"name": "productname", "value": "'SIDE ORDERS'"}], "start": 1678098551483, "stop": 1678098551634}, {"name": "To be able to select desired product", "status": "passed", "attachments": [{"name": "toppings_screen", "source": "b2d558b9-c125-4efd-8de9-d05fe83a0b20-attachment.png", "type": "image/png"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"38f3660f0e34e8ddedc36b2e7610d2d4\")>"}, {"name": "productname", "value": "'Mozzarella Steak Fries'"}], "start": 1678098554640, "stop": 1678098555208}, {"name": "to add product to bag and verify cart details before checkout", "status": "broken", "statusDetails": {"message": "ValueError: could not convert string to float: \n", "trace": "  File \"c:\\python37\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Digital Suppliers\\Documents\\GitHub\\bestintown\\methods.py\", line 629, in add_to_bag_and_verify_cart_details\n    raise e\n  File \"C:\\Users\\Digital Suppliers\\Documents\\GitHub\\bestintown\\methods.py\", line 603, in add_to_bag_and_verify_cart_details\n    totalprice = float(subtotal2) + float(dis_amount)\n"}, "attachments": [{"name": "Exception_screen", "source": "1f307406-359c-47d3-a6d6-64f88f09c812-attachment.png", "type": "image/png"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"38f3660f0e34e8ddedc36b2e7610d2d4\")>"}], "start": 1678098557217, "stop": 1678098574874}], "attachments": [{"name": "exception_screen", "source": "9aaf47fa-977e-4ca1-93ba-a856cecbb0eb-attachment.png", "type": "image/png"}], "start": 1678098528890, "stop": 1678098577283, "uuid": "9b11062b-d690-45ed-b4bf-e176eb1c24fa", "historyId": "af2e7cb40ddee2b43693da9a17302eb6", "testCaseId": "aff1b2a05dc53bae74ab2e15449cb49f", "fullName": "test_suite.TestMenuItems#test_22_SIDE_ORDERS", "labels": [{"name": "suite", "value": "test_suite"}, {"name": "subSuite", "value": "TestMenuItems"}, {"name": "host", "value": "DESKTOP-JHQBC5Q"}, {"name": "thread", "value": "31816-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_suite"}]}