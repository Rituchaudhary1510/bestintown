{"name": "test_16_Burgers", "status": "broken", "statusDetails": {"message": "KeyError: 'size'", "trace": "self = <test_menuitems.TestMenuItems testMethod=test_16_Burgers>\n\n    @allure.description(\"To verify BURGERS added successfully to cart.\")\n    def test_16_Burgers(self):\n        By_xpath = self.driver.find_element_by_xpath\n        try:\n            f = open(\"data.json\", \"r\")\n            data = json.loads(f.read())\n            time.sleep(5)\n            sign_in(self.driver, data[\"username3\"], data[\"password\"])\n            time.sleep(2)\n            for m in data[\"BURGERS\"]:\n                print(m)\n                execute_click_by_product(self.driver, m)\n                select_product(self.driver, m[\"menuitem\"])\n                time.sleep(2)\n                select_pizza_sides(self.driver, m[\"size\"],\n                                   m[\"crust\"], m[\"extras\"], m[\"additional_topping\"])\n                add_to_bag_and_verify_cart_details(self.driver)\n            Checkout_to_paymentscreen(self.driver)\n            time.sleep(3)\n            place_ur_order_from_payment(self.driver, \"Delivery\")\n            order_number = verify_order_details(\n                self.driver, \"Delivery\", \"9:30am\")\n            print(order_number)\n            f.close()\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(\n            ), name='exception_screen', attachment_type=AttachmentType.PNG)\n>           raise e\n\ntest_menuitems.py:478: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_menuitems.TestMenuItems testMethod=test_16_Burgers>\n\n    @allure.description(\"To verify BURGERS added successfully to cart.\")\n    def test_16_Burgers(self):\n        By_xpath = self.driver.find_element_by_xpath\n        try:\n            f = open(\"data.json\", \"r\")\n            data = json.loads(f.read())\n            time.sleep(5)\n            sign_in(self.driver, data[\"username3\"], data[\"password\"])\n            time.sleep(2)\n            for m in data[\"BURGERS\"]:\n                print(m)\n                execute_click_by_product(self.driver, m)\n                select_product(self.driver, m[\"menuitem\"])\n                time.sleep(2)\n>               select_pizza_sides(self.driver, m[\"size\"],\n                                   m[\"crust\"], m[\"extras\"], m[\"additional_topping\"])\nE                                  KeyError: 'size'\n\ntest_menuitems.py:465: KeyError"}, "description": "To verify BURGERS added successfully to cart.", "steps": [{"name": "To fetch the website with url: 'https://stage.bestintownpizza.com/home'", "status": "passed", "attachments": [{"name": "website_screen", "source": "7c225033-3365-43ea-bd6e-f486385dacb7-attachment.png", "type": "image/png"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"fe1090e19b62c40852879d48743593fd\")>"}, {"name": "site_url", "value": "'https://stage.bestintownpizza.com/home'"}], "start": 1677825579871, "stop": 1677825585878}, {"name": "To verify that user is able to sign in with any email id.", "status": "passed", "attachments": [{"name": "Signin_screen", "source": "624286d1-4ac1-46f2-bc39-f8db2d584610-attachment.png", "type": "image/png"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"fe1090e19b62c40852879d48743593fd\")>"}, {"name": "email", "value": "'ritutanwar1510@gmail.com'"}, {"name": "password", "value": "'Ritu@1510'"}], "start": 1677825590883, "stop": 1677825598883}, {"name": "To perform click operation on the element specified in list:'BURGERS'", "status": "passed", "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"fe1090e19b62c40852879d48743593fd\")>"}, {"name": "productname", "value": "'BURGERS'"}], "start": 1677825600887, "stop": 1677825601039}, {"name": "To be able to select desired product", "status": "passed", "attachments": [{"name": "toppings_screen", "source": "e72d9bda-6a8f-4c22-931e-8bbb85446f72-attachment.png", "type": "image/png"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"fe1090e19b62c40852879d48743593fd\")>"}, {"name": "productname", "value": "'Hamburger'"}], "start": 1677825604045, "stop": 1677825604793}], "attachments": [{"name": "exception_screen", "source": "33e0f52b-5280-4aeb-acd7-2256f42b0222-attachment.png", "type": "image/png"}], "start": 1677825578340, "stop": 1677825609311, "uuid": "947d8e88-cd22-4f43-8e79-c7dd56a0c012", "historyId": "fdf32e9aecb2bf4487a14fa90562a5fb", "testCaseId": "1c02bc2228ca6696089961ae387e69ec", "fullName": "test_suite.TestMenuItems#test_16_Burgers", "labels": [{"name": "suite", "value": "test_suite"}, {"name": "subSuite", "value": "TestMenuItems"}, {"name": "host", "value": "DESKTOP-JHQBC5Q"}, {"name": "thread", "value": "14472-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_suite"}]}